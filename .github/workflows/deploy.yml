name: Deploy app

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
  REPOSITORY_NAME: apis

jobs:
  aws_environment_setup:
    runs-on: ubuntu-latest
    environment: ${{ vars.DEV_ENVIRONMENT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4.0.3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
                        
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.1.2
  
      - name: Cache Terraform Dependencies
        uses: actions/cache@v4.2.0
        with:
          path: ./terraform/.terraform
          key: terraform-${{ runner.os }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: terraform-${{ runner.os }}-
  
      - name: Terraform provisioning for ECR
        id: set_ecr_output
        run: |
          cd ./terraform
          terraform init
          terraform apply -target=module.aws_environment -var="repo_name=$REPOSITORY_NAME" -var="image_url=" -auto-approve

          # Capture ECR Repo URL and save to outputs for next job
          echo "$(terraform output -raw repository_url)" >> ../repo_url.txt
    
      - name: Upload output file for next job
        uses: actions/upload-artifact@v4.6.0
        with:
          name: repo_url
          path: repo_url.txt
      
  upload_docker_image:
    runs-on: ubuntu-latest
    needs: aws_environment_setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4.0.3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: repo_url
          path: ./
      
      - name: Setup Docker
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image to AWS ECR
        id: set_img_url
        run: |
          ECR_REPO_URL=$(cat repo_url.txt)
          echo "Retrieved from previous job: $ECR_REPO_URL"

          bash ./scripts/docker_setup.sh $ECR_REPO_URL # IMAGE_URL is exported to github_env within the script run
          echo "IMAGE_URL=$IMAGE_URL" >> $GITHUB_OUTPUT
          echo "Added IMAGE_URL: ::add-mask::$IMAGE_URL to job outputs"
    outputs:
      IMAGE_URL: ${{ steps.set_img_url.outputs.IMAGE_URL }}  # Declare the outputs already captured in steps

  ecs_setup:
    runs-on: ubuntu-latest
    needs: upload_docker_image
    environment: ${{ vars.DEV_ENVIRONMENT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4.0.3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.1.2

      - name: Restore Terraform Cache
        uses: actions/cache@v4.2.0
        with:
          path: ./terraform/.terraform
          key: terraform-${{ runner.os }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: terraform-${{ runner.os }}-

      - name: Terraform provisioning for ECS
        run: |
          IMAGE_URL=${{ needs.upload_docker_image.outputs.IMAGE_URL }}
          echo "Retrieved from previous job: $IMAGE_URL"

          cd ./terraform
          terraform init 
          terraform apply -target=module.ecs_setup -var="repo_name=" -var="image_url=$IMAGE_URL" -auto-approve

          # Capture load balancer URL and save file to upload as artifact for next job
          cd ../
          pwd
          echo "$(terraform output -raw load_balancer_dns)" >> outputs.txt

      - name: Upload load balancer DNS for next job
        uses: actions/upload-artifact@v4.6.0
        with:
          name: outputs
          path: outputs.txt

  finish_job:
    runs-on: ubuntu-latest
    needs: ecs_setup
    environment: ${{ vars.DEV_ENVIRONMENT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
 
      - name: Download outputs artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          name: outputs
          path: ./

      - name: Show output URL
        run: |
          echo "Load balancer for app: $(cat outputs.txt)"

  cleanup:
    runs-on: ubuntu-latest
    needs: [aws_environment_setup, upload_docker_image, ecs_setup, finish_job]
    # Only run if any previous job fails
    if: failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4.0.3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.1.2
  
      - name: Restore Terraform Cache
        uses: actions/cache@v4.2.0
        with:
          path: ./terraform/.terraform
          key: terraform-${{ runner.os }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: terraform-${{ runner.os }}-
  
      - name: Destroy infrastructure
        run: |
          cd ./terraform
          terraform init
          terraform destroy -var="repo_name=" -var="image_url=" -auto-approve
          echo "Terraform resources have been destroyed."
